# Workflow which runs end to end tests against scalyr agent helm chart.
# Those tests verify that the chart can be installed and that it correctly configured agent
# ingestion for various options (daemonset mode, deployment mode, k8s cluster metrics are ingested,
# pod logs are ingested, etc.)
name: "End to End Tests"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 4 * * *'

permissions:
  actions: write  # Needed for skip-duplicate-jobs job
  contents: read

jobs:
  # Special job which automatically cancels old runs for the same branch, prevents runs for the
  # same file set which has already passed, etc.
  pre_job:
    name: Skip Duplicate Jobs Pre Job
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@9d116fa7e55f295019cfab7e3ab72b478bcf7fdd  # v4.0.0
        with:
          cancel_others: 'true'
          github_token: ${{ github.token }}

  daemonset_controller_type:
    name: Daemonset - k8s ${{ matrix.k8s_version }} - ${{ matrix.image_type }}
    runs-on: ubuntu-latest

    needs: pre_job
    # NOTE: We always want to run job on main branch
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/main' }}

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - 'v1.22.2'
          - 'v1.24.3'
        image_type:
          - "buster"
          - "alpine"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Chart Testing Environment and Kubernetes Cluster
        uses: ./.github/actions/setup-chart-testing-environment/
        with:
          k8s_version: "${{ matrix.k8s_version }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Install Scalyr Tool
        uses: ./.github/actions/install-scalyr-tool/

      - name: Install Helm Chart
        uses: ./.github/actions/install-helm-chart
        with:
          scalyr_api_key: "${{ secrets.SCALYR_WRITE_API_KEY_US }}"
          values_file_path: "ci/daemonset-agent-values.yaml"
          image_type: "${{ matrix.image_type }}"

      - name: Verify Agent Logs are Ingested
        env:
          scalyr_readlog_token: "${{ secrets.SCALYR_READ_API_KEY_US }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
        run: |
          # Verify agent and kubernetes monitor has been started
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "No checkpoints were found. All logs will be copied starting at their current end"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Cluster name detected, enabling k8s metric reporting"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "kubernetes_monitor parameters: "'

          # Verify Kubernetes metrics are beeing ingested
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_monitor.log" "k8s-daemon-set=\"scalyr-agent\""'

      # We install Redis helm chart and later verify that logs from Redis pods are successfully ingested
      - name: Install Redis Helm Chart
        uses: nick-fields/retry@b4fa57557dda8c2f30bcb2d19372cc3237190f7f  # v2.8.1
        with:
          shell: bash
          timeout_seconds: 100
          max_attempts: 3
          command: |
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm install --wait --values ci/redis-values.yaml redis-test bitnami/redis

            sleep 20

      - name: Verify Redis Pods Logs are Ingested
        env:
          scalyr_readlog_token: "${{ secrets.SCALYR_READ_API_KEY_US }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
        uses: nick-fields/retry@b4fa57557dda8c2f30bcb2d19372cc3237190f7f  # v2.8.1
        with:
          shell: bash
          timeout_seconds: 100
          max_attempts: 3
          command: |
            # master pod
            ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "redis" pod_name="redis-test-master-0" "Redis is starting"'
            ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "redis" pod_name="redis-test-master-0" "Configuration loaded"'

            # replica pod
            ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile contains "redis" pod_name="redis-test-replicas-0" "MASTER <-> REPLICA sync started"'

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/main' || github.head_ref == 'main') }}
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522 # v1.2.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'

  deployment_controller_type:
    name: Deployment - k8s ${{ matrix.k8s_version }} - ${{ matrix.image_type }}
    runs-on: ubuntu-latest

    needs: pre_job
    # NOTE: We always want to run job on main branch
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/main' }}

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - 'v1.22.2'
          - 'v1.24.3'
        image_type:
          - "buster"
          - "alpine"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Chart Testing Environment and Kubernetes Cluster
        uses: ./.github/actions/setup-chart-testing-environment/
        with:
          k8s_version: "${{ matrix.k8s_version }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Install Scalyr Tool
        uses: ./.github/actions/install-scalyr-tool/

      - name: Install Helm Chart
        uses: ./.github/actions/install-helm-chart
        with:
          scalyr_api_key: "${{ secrets.SCALYR_WRITE_API_KEY_US }}"
          values_file_path: "ci/deployment-agent-values.yaml"
          image_type: "${{ matrix.image_type }}"

      - name: Verify Logs are Ingested
        env:
          scalyr_readlog_token: "${{ secrets.SCALYR_READ_API_KEY_US }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
        run: |
          export POD_NAME=$(kubectl get pod --selector=test=true -o jsonpath="{.items[0].metadata.name}")

          # Verify agent and kubernetes monitor has been started
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "No checkpoints were found. All logs will be copied starting at their current end"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Cluster name detected, enabling k8s metric reporting"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "kubernetes_monitor parameters: "'

          # Verify Kubernetes metrics are beeing ingested
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_monitor.log" "k8s-deployment=\"scalyr-agent\""'

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/main' || github.head_ref == 'main') }}
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522 # v1.2.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'

  daemonset_controller_type_k8s_explorer_no_deps:
    # In this workflow we manually install node exporter and kube state metrics exporter dependency
    name: Daemonset (Explorer - no deps) - k8s ${{ matrix.k8s_version }} - ${{ matrix.image_type }}
    runs-on: ubuntu-latest

    needs: pre_job
    # NOTE: We always want to run job on main branch
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/main' }}

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - 'v1.22.2'
          - 'v1.24.3'
        image_type:
          - "buster"
          - "alpine"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Chart Testing Environment and Kubernetes Cluster
        uses: ./.github/actions/setup-chart-testing-environment/
        with:
          k8s_version: "${{ matrix.k8s_version }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Install Scalyr Tool
        uses: ./.github/actions/install-scalyr-tool/

      - name: Install Helm Chart
        uses: ./.github/actions/install-helm-chart
        with:
          scalyr_api_key: "${{ secrets.SCALYR_WRITE_API_KEY_US }}"
          values_file_path: "ci/daemonset-agent-values-with-k8s-explorer.yaml"
          image_type: "${{ matrix.image_type }}"

      # Create mock pods and exporters which will be scrapped by the monitor
      # (step taken from scalyr-agent-2 repo)
      - name: Create mock pods and exporters
        run: |
          git clone --depth 1 https://github.com/scalyr/scalyr-agent-2.git

          kubectl create namespace monitoring

          # 1. node exporter pod
          pushd scalyr-agent-2/
          kubectl apply -f tests/e2e/k8s_om_monitor/node_exporter.yaml

          # 2. kube state metrics deployment
          kubectl apply -k tests/e2e/k8s_om_monitor/kube-state-metrics/

          sleep 20
          kubectl get pods -A

          # Verify dependencies have been installed and are running
          set -e
          echo "Verifying node-exporter and kube-state-metrics pods are running"
          kubectl get pods -A | grep node-exporter
          kubectl get pods -A | grep kube-state-metrics

      - name: Verify Agent Logs are Ingested
        env:
          scalyr_readlog_token: "${{ secrets.SCALYR_READ_API_KEY_US }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
        run: |
          # Verify agent and kubernetes monitor has been started
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "No checkpoints were found. All logs will be copied starting at their current end"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Cluster name detected, enabling k8s metric reporting"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "kubernetes_monitor parameters: "'

          #./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Config option '\'stop_agent_on_failure\'' is enabled"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "stop_agent_on_failure"'

          # Verify Kubernetes metrics are beeing ingested
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_monitor.log" "k8s-daemon-set=\"scalyr-agent\""'

          # Verify Kubernetes Explorer logs are there
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "monitor:openmetrics_monitor"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting monitor openmetrics_monitor"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent_debug.log" "Adding new monitor with config:"'

          # Assert that Kubernetes Explorer metrics which we scrape from 2 annotated pods are there
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" logfile contains "node-exporter" k8s-cluster="k8s-explorer-e2e-tests" k8s-daemon-set="node-exporter" "level=info collector=cpu"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "kubernetes-api-cadvisor-metrics.log" k8s-cluster="k8s-explorer-e2e-tests"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "kubernetes-api-cadvisor-metrics.log" k8s-cluster="k8s-explorer-e2e-tests" "container_start_time_seconds "'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "kubernetes-api-cadvisor-metrics.log" k8s-cluster="k8s-explorer-e2e-tests" "container_spec_memory_limit_bytes "'

          # Verify metrics scraped from node-exporter and kube-state-metrics are available
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "node-exporter" k8s-cluster="k8s-explorer-e2e-tests"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "node-exporter" k8s-cluster="k8s-explorer-e2e-tests" "process_resident_memory_bytes"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" $logfile contains "kube-state-metrics" k8s-cluster="k8s-explorer-e2e-tests" "kube_storageclass_labels 1 "'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" $logfile contains "kube-state-metrics" k8s-cluster="k8s-explorer-e2e-tests" "namespace=\"default\" secret=\"scalyr-agent-scalyr-api-key\" type=\"Opaque\""'

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/main' || github.head_ref == 'main') }}
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522 # v1.2.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'


  daemonset_controller_type_k8s_explorer_with_deps:
    # In this workflow we use helm chart functionality to install the dependencies
    name: Daemonset (Explorer - deps) - k8s ${{ matrix.k8s_version }} - ${{ matrix.image_type }}
    runs-on: ubuntu-latest

    needs: pre_job
    # NOTE: We always want to run job on main branch
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/main' }}

    strategy:
      fail-fast: false
      matrix:
        k8s_version:
          - 'v1.22.2'
          - 'v1.24.3'
        image_type:
          - "buster"
          - "alpine"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Chart Testing Environment and Kubernetes Cluster
        uses: ./.github/actions/setup-chart-testing-environment/
        with:
          k8s_version: "${{ matrix.k8s_version }}"
          github_token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Install Scalyr Tool
        uses: ./.github/actions/install-scalyr-tool/

      - name: Install Helm Chart
        uses: ./.github/actions/install-helm-chart
        with:
          scalyr_api_key: "${{ secrets.SCALYR_WRITE_API_KEY_US }}"
          values_file_path: "ci/daemonset-agent-values-with-k8s-explorer-with-deps.yaml"
          image_type: "${{ matrix.image_type }}"

      # Create mock pods and exporters which will be scrapped by the monitor
      # (step taken from scalyr-agent-2 repo)
      - name: Verify exporter pods have been installed and are running
        run: |
          set -e

          sleep 20
          kubectl get pods -A

          # Verify dependencies have been installed and are running
          echo "Verifying node-exporter and kube-state-metrics pods are running"
          kubectl get pods -A | grep node-exporter
          kubectl get pods -A | grep kube-state-metrics

      - name: Verify Agent Logs are Ingested
        env:
          scalyr_readlog_token: "${{ secrets.SCALYR_READ_API_KEY_US }}"
          SCALYR_AGENT_POD_NAME: "${{ env.SCALYR_AGENT_POD_NAME }}"
        run: |
          # Verify agent and kubernetes monitor has been started
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting scalyr agent..."'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "No checkpoints were found. All logs will be copied starting at their current end"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Cluster name detected, enabling k8s metric reporting"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "kubernetes_monitor parameters: "'

          #./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Config option '\'stop_agent_on_failure\'' is enabled"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "stop_agent_on_failure"'

          # Verify Kubernetes metrics are beeing ingested
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/kubernetes_monitor.log" "k8s-daemon-set=\"scalyr-agent\""'

          # Verify Kubernetes Explorer logs are there
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "monitor:openmetrics_monitor"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent.log" "Starting monitor openmetrics_monitor"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" $logfile="/var/log/scalyr-agent-2/agent_debug.log" "Adding new monitor with config:"'

          # Assert that Kubernetes Explorer metrics which we scrape from 2 annotated pods are there
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" logfile contains "node-exporter" k8s-cluster="k8s-explorer-e2e-tests" k8s-daemon-set="node-exporter" "level=info collector=cpu"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "kubernetes-api-cadvisor-metrics.log" k8s-cluster="k8s-explorer-e2e-tests"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "kubernetes-api-cadvisor-metrics.log" k8s-cluster="k8s-explorer-e2e-tests" "container_start_time_seconds "'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "kubernetes-api-cadvisor-metrics.log" k8s-cluster="k8s-explorer-e2e-tests" "container_spec_memory_limit_bytes "'

          # Verify metrics scraped from node-exporter and kube-state-metrics are available
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "node-exporter" k8s-cluster="k8s-explorer-e2e-tests"'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" logfile contains "node-exporter" k8s-cluster="k8s-explorer-e2e-tests" "process_resident_memory_bytes"'

          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" $logfile contains "kube-state-metrics" k8s-cluster="k8s-explorer-e2e-tests" "kube_storageclass_labels 1 "'
          ./ci/scripts/scalyr-query.sh '$serverHost="'${SCALYR_AGENT_POD_NAME}'" monitor="openmetrics_monitor" $logfile contains "kube-state-metrics" k8s-cluster="k8s-explorer-e2e-tests" "namespace=\"default\" secret=\"scalyr-agent-scalyr-api-key\" type=\"Opaque\""'

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/main' || github.head_ref == 'main') }}
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522 # v1.2.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'
